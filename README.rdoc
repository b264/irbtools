= irbtools

Improvements for Ruby's IRB console, for example, colored output, and a lot of debugging and introspection methods. Unlike with PRY, you are still in your normal IRB. It is designed to work out-of-the-box so there is no reason to not use it!


== Setup

  $ gem install irbtools


=== Extra Requirements

Linux: Clipboard support requires *xclip* or *xsel*: <tt>sudo apt-get install xclip</tt>

Windows: ANSI colors can be enabled via ansicon[https://github.com/adoxa/ansicon]

Mac OS: The g gem makes use of *growl*


== Usage

IRB executes code in <tt>~/.irbrc</tt> on start-up. If the file does not exist, yet, just create a new one. Add the following:

  require 'irbtools'

See further below, if you want to customize which libraries should be loaded on IRB start-up.


=== With Bundler

To integrate *irbtools* into a Rails console (or any project that uses bundler), add <tt>irbtools</tt> to your Gemfile:

  gem 'irbtools', require: 'binding.repl'

Thanks to help from the {binding.repl gem}[https://github.com/robgleeson/binding.repl], you can start IRB (with *irbtools*) directly from your code:

  binding.repl!


=== Debundle

Another way to activate *irbtools* in bundler projects is to add a {debundle hack}[https://github.com/janlelis/debundle.rb] at the beginning of your <tt>~/.irbrc</tt> file.


=== This is irbtools Light

When installing *irbtools*, some gems will not be installed to ensure Windows OS support, for example, the bond gem for better auto-completion or the looksee gem for method/class introspection. These are packaged as {irbtools-more}[https://github.com/janlelis/irbtools-more]. To use <tt>irbtools-more</tt>, you will need to change your <tt>.irbrc</tt> to:

  require 'irbtools/more'

and/or edit your Gemfile to

  gem 'irbtools-more', require: 'binding.repl'


=== Included Gems and Libraries
==== IRB Improvements

* Colorization: wirb[https://github.com/janlelis/wirb/]
* IRB tweaks: fancy_irb[https://github.com/janlelis/fancy_irb]
* Custom views for specific objects: hirb[http://tagaholic.me/2009/03/13/hirb-irb-on-the-good-stuff.html]
* <b>(irbtools-more)</b> Better IRB tab-completion: bond[http://tagaholic.me/bond/]


==== Helpful Methods

* Useful IRB commands: every_day_irb[https://github.com/janlelis/irbtools/tree/master/lib/every_day_irb.rb]
* Clipboard Access: clipboard[http://github.com/janlelis/clipboard]
* Loads an editor into your IRB session: interactive_editor[https://github.com/jberkel/interactive_editor]
* Print debugging helpers: debugging[https:/github.com/janlelis/debugging]
* File-related system commands: *fileutils* (stdlib)


==== Platform Information

* Query current Ruby version: ruby_version[https://github.com/janlelis/ruby_version]
* Query current Ruby engine: ruby_engine[https://github.com/janlelis/ruby_engine]
* Query current operating system: os[https://github.com/rdp/os]
* Global information by the interpreter behind one <tt>Info</tt> constant: ruby_info[https://github.com/janlelis/ruby_info]


==== Introspection

* Improved lookup path inspection: method_locator[https://github.com/ryanlecompte/method_locator]
* Displays a method's source: method_source[https://github.com/banister/method_source]
* Adds a +ri+ doc method to Object: [ori[https://github.com/dadooda/ori]
* Finds the methods that turned a value into another value: methodfinder[https://github.com/citizen428/methodfinder]
* Syntax highlighting: coderay[https://github.com/rubychan/coderay]
* <b>irbtools-more</b> Awesome lookup path inspection: looksee[https://github.com/oggy/looksee]
* <b>irbtools-more</b> Useful "did you mean?" suggestions in stack-traces: did_you_mean[https://github.com/yuki42/did_you_mean]


==== Code Organization

* Command/task framework similar to rake and thor: boson[http://tagaholic.me/boson/]
* Shortcuts for your favorite methods, saved in personal yaml file: alias[http://tagaholic.me/2009/07/07/alias-quickness-in-the-ruby-console.html]


=== Irbtools Methods
==== From every_day_irb

[ls]     Returns an array with the directory's content
[cat]    Shortcut for <tt>File.read</tt>
[rq]     Shortcut for <tt>require library.to_s</tt> (allows concise syntax like <tt>rq:mathn</tt>)
[ld]     Shortcut for <tt>load library.to_s + '.rb'</tt>
[rrq/rerequire] Little hack for rerequiring a library (it's really hack and not reliable, but works in most cases)
[reset!] Restarts IRB
[clear]  Clears the terminal (<tt>system "clear"</tt>)
[session_history] Returns all issued commands as a string


==== From irbtools in conjunction with the libraries

[cd]      Improves the cd that is already provided by *fileutils* (try <tt>cd '-'</tt>)
[version] Displays RubyVersion
[engine]  Displays RubyEngine
[os]      OS information
[info]    Aggregates information about your Ruby environment
[copy]    Shortcut for <tt>Clipboard.copy</tt>
[paste]   Shortcut for <tt>Clipboard.paste</tt>
[copy_input]  Copies the session_history to the clipboard
[copy_output] Copies this session's results to the clipboard
[mf]      Shortcut for using the *methodfinder*
[page]    Shortcut for using the pager from *hirb*
[colorize] Syntax highlights a ruby string using *coderay*
[ray]      Syntax highlights a ruby file using *coderay*


==== From the libraries (puplic Object methods, renamed/patched)

[ri]     Patching the +ri+ provided by *ori* to also allow default ri syntax on toplevel
[src]    Shortcut for displaying the method source using *method_source* and *coderay*
[mlp]    Shortcut for the *method_locator*
[l/lp]   Alternative method name to trigger the *looksee* gem (<b>irbtools-more</b>)


== Advanced tweaking
=== Customize libraries to load

It is possible to modify, which libraries to load:

  # Don't require 'irbtools', but:
  require 'irbtools/configure'
  # Here you can modify the libraries using the methods below
  Irbtools.start

If you do not want to load the default set of *irbtools* gems, you will have to use <tt>require 'irbtools/minimal'</tt> instead of <tt>configure</tt>.

You can use the following methods:

* <tt>Irbtools.add_library(lib, options_hash, &block)</tt>
* <tt>Irbtools.remove_library(lib)</tt>

The <tt>options_hash</tt> defines the way in which *irbtools* loads the library. The following options are possible
[(no options)/<tt>:start</tt>] The library is required on startup before doing anything else (before displaying the prompt)
[<tt>:thread => identifier</tt>] After loading everything else, the library is required in a thread (while continuing loading). You can choose any identifier, but if you take the same one for multiple libraries, they will be loaded in the same thread (in the order that you define)
[<tt>:late => true</tt>] The library is required just before showing the prompt (note: loading threads might still be in process)
[<tt>:late_thread => identifier</tt>] Same as <tt>:thread</tt>, but after loading late libraries.
[<tt>:sub_session => true</tt>] The library is loaded every time a sub-session starts (using <tt>IRB.conf[:IRB_RC]</tt>). In ripl[https://github.com/cldwalker/ripl], <tt>ripl-after_rc</tt> is used.
[<tt>:autoload => :Constant</tt>] Use Ruby's <tt>autoload</tt> feature. It loads the library as soon as the constant is encountered.

You can pass a block as third argument, which gets executed after the library has completed loading (except for <tt>:autoload</tt>, in which case the code will be executed directly on startup). You can modify the callbacks by using <tt>Irbtools.add_library_callback</tt> and <tt>Irbtools.replace_library_callback</tt>.

When adding a new library, you should firstly consider some way to load it via <tt>:autoload</tt>.
If this is not possible, try loading via <tt>:thread</tt>. If that is not possible either, you will need to fallback to the default loading mechanism.


== Troubleshooting: Unicode causes wrong display widths?

If you use double-width unicode characterss, you will need to paste the following snippet to your <tt>.irbrc</tt> file.

  Irbtools.replace_library_callback :fancy_irb do
    FancyIrb.start east_asian_width: true
  end

This setting is deactivated by default, because of performance issues.


== Hint: Faster start-up

You can get an about a second faster start-up time by changing the loading methods for wirb and fancy_irb to <tt>:thread</tt> (drawback: the hash rocket will not be used for the first result):

  require 'irbtools/configure'
  Irbtools.remove_library :paint
  Irbtools.remove_library :fancy_irb
  Irbtools.add_library :paint, :late => true do Wirb.load_schema :classic_paint if defined? Wirb end
  Irbtools.add_library :fancy_irb, :thread => -1 do FancyIrb.start end
  Irbtools.start


== Welcome Message

The welcome message can be customized with <tt>Irbtools.welcome_message=</tt>


== Web Console

*irbtools* works well together with the amazing {web-console!}[https://github.com/rails/web-console]


== J-_-L

Copyright (c) 2010-2014 Jan Lelis <http://janlelis.com> released under the MIT license.
